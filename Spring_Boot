Ques - What is SpringBoot ?
    Spring Boot is a project that is built on the top of the Spring Framework. It provides an easier and faster way to set up, configure, and run both simple and 
    web-based applications.
    It is a Spring module that provides the RAD (Rapid Application Development) feature to the Spring Framework. It is used to create a stand-alone Spring-based 
    application that you can just run because it needs minimal Spring configuration.
    ( Spring Boot is the combination of Spring Framework and Embedded Servers )
    In Spring Boot, there is no requirement for XML configuration

    Spring boot is an open source framework that can be used to build mobile and web applications with the help of micro services. This includes both Java applications
    and WAR deployments.
    
Ques - Why should we use Spring Boot Framework?
    We should use Spring Boot Framework because:
    - The dependency injection approach is used in Spring Boot.
    - It contains powerful database transaction management capabilities.
    - It simplifies integration with other Java frameworks like JPA/Hibernate ORM, Struts, etc.
    - It reduces the cost and development time of the application.

Advantages
    * Spring boot offers an effortless way to create spring-based applications using JAVA or Groovy.
    * Spring Boot minimizes the time spent in developing and increasing productivity.
    * It helps in reducing all the manual work of writing annotations, boilerplate codes and XML configurations.
    * Developers have easy access to Embedded HTTP servers such as Jetty, Tomcat
    * It provides a plugin that has made working with embedded and in-memory databases very smoothly and readily.
    
 Disadvantages
    * Lack of control. Spring Boot creates a lot of unused dependencies, resulting in a large deployment file;
    * The complex and time-consuming process of converting a legacy or an existing Spring project to a Spring Boot application;
    * Not suitable for large-scale projects. Although it’s great for working with microservices, many developers claim that Spring Boot is not suitable for building 
      monolithic applications.

Ques - Difference between Spring and Spring Boot :
                  Spring                                                     Spring Boot
     * Spring is an open-source lightweight framework               * Spring Boot is built on top of the conventional spring framework,
       widely used to develop enterprise applications.                widely used to develop REST APIs.
     * The most important feature of the Spring Framework           * The most important feature of the Spring Boot is Auto configuration.
       is dependency injection.	
     * It helps to create a loosely coupled application.	    * It helps to create a stand-alone application.
     * To run the Spring application, we need to set the            * Spring Boot provides embedded servers such as Tomcat and Jetty etc.
       server explicitly.	
     * To run the Spring application, a deployment                  * There is no requirement for a deployment descriptor.
       descriptor is required.	
     * To create a Spring application, the developers               * It reduces the lines of code.
       write lots of code.	
     * It doesn’t provide support for the in-memory                 * It provides support for the in-memory database such as H2.
       database.	
       
  Ques - Spring Boot Annotations
        Spring Boot Annotations is a form of metadata that provides data about a program. In other words, annotations are used to provide supplemental information 
        about a program. It is not a part of the application that we develop. It does not have a direct effect on the operation of the code they annotate. It does 
        not change the action of the compiled program.
        Spring annotations present in the org.springframework.boot.autoconfigure and org.springframework.boot.autoconfigure.condition packages are commonly known as
        Spring Boot annotations. Some of the annotations that are available in this category are:
        * @SpringBootApplication
        * @SpringBootConfiguration
        * @EnableAutoConfiguration
        * @ComponentScan
        
        1. @SpringBootApplication Annotation
            This annotation is used to mark the main class of a Spring Boot application. It encapsulates @SpringBootConfiguration, @EnableAutoConfiguration, and
            @ComponentScan annotations with their default attributes.

      Example - @SpringBootApplication
                public class DemoApplication {
	              public static void main(String[] args)
	              {
		             SpringApplication.run(DemoApplication.class, args);
	              }
                }
        
Ques - Spring Boot Auto-configuration
	Spring Boot auto-configuration automatically configures the Spring application based on the jar dependencies that we have added.
	For example, if the H2 database Jar is present in the classpath and we have not configured any beans related to the database manually, the Spring Boot's 
	auto-configuration feature automatically configures it in the project.
	We can enable the auto-configuration feature by using the annotation @EnableAutoConfiguration. But this annotation does not use because it is wrapped inside 
	the @SpringBootApplication annotation. The annotation @SpringBootApplication is the combination of three annotations: @ComponentScan, @EnableAutoConfiguration,
	and @Configuration. However, we use @SpringBootApplication annotation instead of using @EnableAutoConfiguration.

Ques - Spring Boot Actuator
	Spring Boot Actuator is a sub-project of the Spring Boot Framework. It includes a number of additional features that help us to monitor and manage the Spring
	Boot application. It contains the actuator endpoints. We can use HTTP and JMX endpoints to manage and monitor the Spring Boot application. If we want to get 
	production-ready features in an application, we should use the Spring Boot actuator.
	There are three main features of Spring Boot Actuator:
	- Endpoints
	- Metrics
	- Audit
	Endpoint: The actuator endpoints allows us to monitor and interact with the application. Spring Boot provides a number of built-in endpoints. We can also create
	our own endpoint. We can enable and disable each endpoint individually.
	Metrics:  Spring Boot Actuator provides dimensional metrics by integrating with the micrometer. The micrometer is integrated into Spring Boot.
	Audit  :  Spring Boot provides a flexible audit framework that publishes events to an AuditEventRepository. It automatically publishes the authentication events
		  if spring-security is in execution.
	
	Enabling Spring Boot Actuator
			<dependency>  
    				<groupId>org.springframework.boot</groupId>  
    				<artifactId>spring-boot-starter-actuator</artifactId>  
    				<version>2.2.2.RELEASE</version>  
			</dependency>  

Ques - Spring Boot - Build Systems
	Any software system needs a build system to generate a deployable artefact. For example, the artefact for java based applications can be JAR, WAR, or EAR. The
	build tool helps in building the application and creating the artefact. Though many build tools exist in the market, maven and Gradle are popular.
	when you upgrade the Spring Boot version, dependencies also will upgrade automatically.
	1. Maven Dependency
	For Maven configuration, we should inherit the Spring Boot Starter parent project to manage the Spring Boot Starters dependencies. For this, simply we can 
	inherit the starter parent in our pom.xml file 
			<parent>
 			  <groupId>org.springframework.boot</groupId>
 			  <artifactId>spring-boot-starter-parent</artifactId>
  			  <version>1.5.8.RELEASE</version>
			</parent>
	We should specify the version number for Spring Boot Parent Starter dependency. Then for other starter dependencies, we do not need to specify the Spring Boot	
	version number. Observe the code given below −
			<dependencies>
   				<dependency>
      					<groupId>org.springframework.boot</groupId>
      					<artifactId>spring-boot-starter-web</artifactId>
   				</dependency>
			</dependencies>
			
	2. Gradle Dependency
	We can import the Spring Boot Starters dependencies directly into build.gradle file. We do not need Spring Boot start Parent dependency like Maven for Gradle.
	
 Ques - Spring Boot – Code Structure
 	There is no specific layout or code structure for Spring Boot Projects. However, there are some best practices followed by developers that will help us too. 
	You can divide your project into layers like service layer, entity layer, repository layer, etc. You can also divide the project into modules. For example, the
	parent project has two child modules. The first module is for the data layer and the second module is for the web layer. You can also divide the project into
	features.
	It is not a best practice to include a class in the default package. It is because Spring scans the classes in packages and sub-packages mentioned in the 
	annotations like @ComponentScan, @EntityScan, @SpringBootApplication etc. 
	Two approaches that are typically used by most developers to structure their spring boot projects.
	- Structure by Feature
		In this approach, all classes pertaining to a certain feature are placed in the same package.
	- Structure by Layer
		Another way to place the classes is by layer i.e; all controllers can be placed in controllers package and services under services package and all 
		entities under domain or model etc.
	Example
			@SpringBootApplication
			public class MyApplication {
			public static void main(String[] args) {
        		SpringApplication.run(MyApplication.class, args);
    			  }
			}

 Ques - What is Spring Boot Runners?
	Spring Boot provides two runner interfaces, ApplicationRunner and CommandLineRunner. Being Functional Interfaces, both the runners have a single functional 
	method, run(). When we implement one of these runners, Spring Boot invokes its run() method after it starts the context and before the application starts.
	That means we can use Spring Boot CommandLineRunner or ApplicationRunner to execute a piece of code when launching an Application or to create a Spring Boot 
	non-web application.
	The run() method in the CommandLineRunner receives the application or program argument as an array of String.
	the run() method in ApplicationRunner receives the program arguments wrapped in an ApplicationArguments instance.
		Example:- Example of Spring Boot Command Line Runner
		
			package com.amitph.spring.dogs;
			import org.springframework.boot.CommandLineRunner;
			import org.springframework.stereotype.Component;
			import java.util.Arrays;
			@Component
			public class CommandLineRunnerImpl 
    				implements CommandLineRunner {
			@Override
  			public void run(String... args) throws Exception {
    				System.out.println("CommandLineRunner; arguments: ");
    				Arrays.stream(args)
        			.forEach(System.out::println);
  			}
		}

  Ques - 
  	Spring Boot uses Apache Commons logging for all internal logging. Spring Boot’s default configurations provides a support for the use of Java Util Logging, 
	Log4j2, and Logback. Using these, we can configure the console logging as well as file logging.
	If you are using Spring Boot Starters, Logback will provide a good support for logging. Besides, Logback also provides a use of good support for Common Logging,😊😊😊
	Util Logging, Log4J, and SLF4J

 Ques - RESTful Web Services
 	REST stands for REpresentational State Transfer. It is developed by Roy Thomas Fielding, who also developed HTTP. The main goal of RESTful web services is to 
	make web services more effective. RESTful web services try to define services using the different concepts that are already present in HTTP. REST is an 
	architectural approach, not a protocol.
 	We can build REST services with both XML and JSON. JSON is more popular format with REST. 
	The resource has representations like XML, HTML, and JSON. The current state capture by representational resource. The important methods of HTTP are:
		GET: It reads a resource.
		PUT: It updates an existing resource.
		POST: It creates a new resource.
		DELETE: It deletes the resource.
	Advantages of RESTful web services
	- RESTful web services are platform-independent.
	- It can be written in any programming language and can be executed on any platform.
	- It provides different data format like JSON, text, HTML, and XML.
	- It is fast in comparison to SOAP because there is no strict specification like SOAP.
	- These are reusable.
	
